package com.nexos.tecnica.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nexos.tecnica.models.Commodity;
import com.nexos.tecnica.services.CommodityService;

@RestController
@RequestMapping("User")
public class CommodityController {
	
	@Autowired
	private CommodityService CommodityService;
	
	
	@GetMapping
	public ResponseEntity<Page<Commodity>> getAllCommodity(
			@RequestParam(required = false, defaultValue = "0")Integer page,
			@RequestParam(required = false, defaultValue = "10")Integer size, 
			@RequestParam(required = false, defaultValue = "false")Boolean enablePagination) 
	{
		return ResponseEntity.ok().body(CommodityService.getAllCommodity(page, size, enablePagination));
	}
	
	
	@GetMapping( value = "/{ID}")
	public ResponseEntity<Commodity> findByUserId(@PathVariable("ID") Long ID) {
		
		Optional<Commodity> optional = CommodityService.findByUserId(ID);
		
		if(optional.isEmpty()) {
			return ResponseEntity.notFound().build();
		}
		
		return ResponseEntity.ok(optional.get());
	}
	
	
	@PostMapping
	public ResponseEntity<Commodity> saveCommodity(@RequestBody Commodity User) {
		
		Commodity UserBD = CommodityService.saveCommodity(User);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(UserBD);
	}
	
	
	
	@PutMapping( value = "/{ID}")
	public ResponseEntity<Commodity> editCommodity(@RequestBody Commodity User, @PathVariable("ID") Long ID) {
		
		Optional<Commodity> optional = CommodityService.findByUserId(ID);
		
		if(optional.isEmpty()) {
			return ResponseEntity.notFound().build();
		}
		
		Commodity CommodityDB = optional.get();
		CommodityDB.setName(User.getName());
		CommodityDB.setAge(User.getAge());
		CommodityDB.setCharge(User.getCharge());
		CommodityDB.setAdmissionDate(User.getAdmissionDate());
		CommodityDB.setCreatedBy(User.getCreatedBy());
		CommodityDB.setCreationOn(User.getCreationOn());
		CommodityDB.setModifiedBy(User.getModifiedBy());
		CommodityDB.setModifiedOn(User.getModifiedOn());
		
		return ResponseEntity.status(HttpStatus.CREATED).body(CommodityService.editCommodity(CommodityDB));
	}
	
	
	@DeleteMapping( value = "/{ID}")
	public ResponseEntity<Optional<Commodity>> deleteCommodity(@PathVariable("ID") Long ID) {
		CommodityService.deleteCommodity(ID);
		return ResponseEntity.noContent().build();
	}
	

}




